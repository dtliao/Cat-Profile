{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/Searchbox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","registerServiceWorker.js","index.js"],"names":["Card","name","email","id","className","style","backgroundColor","alt","src","color","Cardlist","x","cats","map","cat","Searchbox","searchfield","SearchChange","type","placeholder","onChange","Scroll","props","overflow","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","changeSearch","event","target","value","fetch","then","response","json","users","filterCats","filter","toLowerCase","startsWith","length","React","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.777c068c.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, email, id}) => {\n\treturn (\n\t\t<div className='dib br3 pa3 ma2 grow bw2 shadow-5' style={{backgroundColor: '#f2d9e5'}}>\n\t\t\t<img alt='cats' src={`https://robohash.org/set_set4/${id}?200x200`}/>\n\t\t\t<div>\n\t\t\t\t<h2 style={{color: \"#29293d\"}}>{name}</h2>\n\t\t\t\t<p style={{color: \"#29293d\"}}>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;\n\n\n","import React from 'react';\nimport Card from './Card';\n\nconst Cardlist = ({ cats }) => {\n\tconst x = cats.map(cat =>{\n\t\treturn(\n\t\t\t<Card \n\t\t\t\tid={cat.id} \n\t\t\t\tname={cat.name} \n\t\t\t\temail={cat.email}\n\t\t\t/>\n\t\t)\n\t})\n\t\n\treturn (\n\t\t<div>\n\t\t\t{x}\n\t\t</div>\n\t);\n}\n\nexport default Cardlist;","import React from 'react';\nimport './Searchbox.css';\n\nconst Searchbox = ({ searchfield,SearchChange }) => {\n\treturn(\n\t\t<div className='pa2'>\n\t\t\t<input \n\t\t\t\tclassName='pa3 ba w-15 f3 helvetica'\n\t\t\t\ttype='search' \n\t\t\t\tplaceholder= '&#xf002; search cats'\n\t\t\t\tonChange={SearchChange}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default Searchbox","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n\t\t{props.children}\n\t\t</div>\n\t);\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error, info) {\n\t\tthis.setState({ hasError: true })\n\t}\n\n\trender() {\n\t\tif (this.state.hasError) {\n\t\t\treturn <h1>Oooops... That is not good!</h1>\n\t\t}\n\t\treturn this.props.children\n\t}\n}\n\nexport default ErrorBoundry;","import React from 'react';\nimport Cardlist from '../components/Cardlist';\nimport Searchbox from '../components/Searchbox';\nimport Scroll from'../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\n\nclass App extends React.Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\tcats: [],\n\t\t\tsearchfield: ''\n\t\t}\n\t}\n\t\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then(response=> response.json())\n\t\t\t.then(users => this.setState({ cats: users}));\n\t\t}\n\tchangeSearch = (event) => {\n\t\tthis.setState({searchfield: event.target.value})\n\t}\n\n\trender(){\n\t\tconst { cats, searchfield } = this.state;\n\t\tconst filterCats = cats.filter(cat =>{\n\t\t\treturn cat.name.toLowerCase().startsWith(searchfield.toLowerCase())\n\t\t})\n\t\t\treturn !cats.length ?\n\t\t\t<h1>Loading</h1> :\n\t\t\t(\n\t\t\t\t<div className='tc'>\n\t\t\t\t\t<h1 className='f1'>Cat Friends</h1>\n\t\t\t\t\t<Searchbox SearchChange={this.changeSearch}/>\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t\t\t<Cardlist cats={filterCats}/>\n\t\t\t\t\t\t</ErrorBoundry>\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t\t\t);\n\t}\n}\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App/>, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}